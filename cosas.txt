db.sql:
-- -----------------------------------------------------
-- 1) Eliminar y recrear la base de datos
-- -----------------------------------------------------
DROP DATABASE IF EXISTS `bd_lyl`;
CREATE DATABASE `bd_lyl` DEFAULT CHARACTER SET utf8;
USE `bd_lyl`;

-- -----------------------------------------------------
-- 2) Ajustes temporales para crear tablas en cualquier orden
-- -----------------------------------------------------
SET @OLD_UNIQUE_CHECKS = @@UNIQUE_CHECKS, UNIQUE_CHECKS = 0;
SET @OLD_FOREIGN_KEY_CHECKS = @@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS = 0;
SET @OLD_SQL_MODE = @@SQL_MODE, 
    SQL_MODE = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- 3) Tablas
-- -----------------------------------------------------

-- Tabla: ubicaciones
CREATE TABLE `ubicaciones` (
  `idUbicacion` INT NOT NULL AUTO_INCREMENT,
  `nombre`       VARCHAR(45) NOT NULL,
  `direccion`    VARCHAR(45) NOT NULL,
  `capacidad`    INT NULL,
  PRIMARY KEY (`idUbicacion`),
  UNIQUE KEY `uq_ubicaciones_id` (`idUbicacion`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Tabla: repuestos
CREATE TABLE `repuestos` (
  `idRepuesto`   INT NOT NULL AUTO_INCREMENT,
  `idUbicacion`  INT NOT NULL,
  `sku`          INT NOT NULL,
  `cantidad`     INT NOT NULL,
  `precio`       INT NOT NULL,
  `categoria`    INT NULL,
  `disponible`   ENUM('si','no') NOT NULL,
  `nombre`       VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idRepuesto`),
  UNIQUE KEY `uq_repuestos_id` (`idRepuesto`),
  UNIQUE KEY `uq_repuestos_sku` (`sku`),
  KEY `idx_repuestos_ubicacion` (`idUbicacion`),
  CONSTRAINT `fk_repuestos_ubicaciones`
    FOREIGN KEY (`idUbicacion`)
    REFERENCES `ubicaciones` (`idUbicacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Tabla: vehiculos
CREATE TABLE `vehiculos` (
  `idVehiculo`   INT NOT NULL AUTO_INCREMENT,
  `anio`         INT NULL,
  `idUbicacion`  INT NOT NULL,
  `nombre`       VARCHAR(45) NOT NULL,
  `modelo`       VARCHAR(45) NOT NULL,
  `cilindraje`   VARCHAR(45) NULL,
  `color`        VARCHAR(45) NULL,
  PRIMARY KEY (`idVehiculo`),
  UNIQUE KEY `uq_vehiculos_id` (`idVehiculo`),
  KEY `idx_vehiculos_ubicacion` (`idUbicacion`),
  CONSTRAINT `fk_vehiculos_ubicaciones`
    FOREIGN KEY (`idUbicacion`)
    REFERENCES `ubicaciones` (`idUbicacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Tabla: reservas
CREATE TABLE `reservas` (
  `idReserva`    INT NOT NULL AUTO_INCREMENT,
  `idVehiculo`   INT NOT NULL,
  `sku`          INT NOT NULL,
  `cantidad`     INT NOT NULL,
  `fecha`        DATETIME NULL,
  PRIMARY KEY (`idReserva`),
  UNIQUE KEY `uq_reservas_id` (`idReserva`),
  KEY `idx_reservas_vehiculo` (`idVehiculo`),
  KEY `idx_reservas_sku` (`sku`),
  CONSTRAINT `fk_reservas_vehiculos`
    FOREIGN KEY (`idVehiculo`)
    REFERENCES `vehiculos` (`idVehiculo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reservas_repuestos`
    FOREIGN KEY (`sku`)
    REFERENCES `repuestos` (`sku`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- -----------------------------------------------------
-- 4) Restaurar modos y checks originales
-- -----------------------------------------------------
SET SQL_MODE            = @OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS  = @OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS       = @OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- 5) Insertar datos de ejemplo
-- -----------------------------------------------------
USE `bd_lyl`;

-- 5.1 Insertar ubicaciones
INSERT INTO ubicaciones (nombre, direccion, capacidad) VALUES
  ('Taller Central', 'Calle Motor 123', 500),
  ('Bodega Norte',   'Avenida Partes 456', 2000),
  ('Sucursal Sur',   'Bulevar Repuestos 789', 1500);

-- 5.2 Insertar repuestos
INSERT INTO repuestos (idUbicacion, sku, cantidad, precio, categoria, disponible, nombre) VALUES
  (1, 1001, 50,  15, 1, 'si', 'Filtro de aire'),
  (1, 1002, 30,   8, 1, 'si', 'Bujías'),
  (2, 1003, 20,  45, 2, 'no', 'Pastillas de freno'),
  (3, 1004, 10, 120, 3, 'si', 'Amortiguador');

-- 5.3 Insertar vehículos
INSERT INTO vehiculos (anio, idUbicacion, nombre, modelo, cilindraje, color) VALUES
  (2020, 1, 'Toyota Corolla', 'LE', '1.8L', 'Blanco'),
  (2019, 2, 'Honda Civic',    'EX', '2.0L', 'Rojo');

-- 5.4 Insertar reservas
INSERT INTO reservas (idVehiculo, sku, cantidad, fecha) VALUES
  (1, 1001, 2, NOW()),
  (2, 1003, 1, NOW());

clienteconsole.java:

package com.empresa.cliente;

import com.empresa.inventario.InventarioService;
import com.empresa.inventario.Repuesto;

import java.rmi.Naming;
import java.util.List;
import java.util.Scanner;

public class ClienteConsole {
    public static void main(String[] args) throws Exception {
        InventarioService svc =
            (InventarioService) Naming.lookup("rmi://localhost:1099/InventarioService");
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- Consola Cliente ---");
            System.out.println("1) Ver repuestos");
            System.out.println("2) Consultar repuesto por SKU");
            System.out.println("3) Salir");
            System.out.print("Seleccione una opción: ");
            int op = sc.nextInt();
            sc.nextLine(); // limpia buffer

            switch (op) {
                case 1:
                    System.out.println("\n-- Lista de Repuestos --");
                    List<Repuesto> todos = svc.verRepuestos();
                    if (todos.isEmpty()) {
                        System.out.println("No hay repuestos registrados.");
                    } else {
                        todos.forEach(r -> {
                            System.out.printf("SKU: %d | Nombre: %s | Cantidad: %d | Precio: %d | Disponible: %s%n",
                                r.getSku(), r.getNombre(), r.getCantidad(),
                                r.getPrecio(), r.isDisponible() ? "si" : "no");
                        });
                    }
                    break;

                case 2:
                    System.out.println("\n-- Buscar Repuesto --");
                    System.out.print("Ingrese SKU: ");
                    int sku = sc.nextInt();
                    Repuesto r = svc.consultarRepuesto(sku);

                    if (r == null) {
                        System.out.printf("⚠ No existe ningún repuesto con SKU %d.%n", sku);
                    } else {
                        System.out.println("Repuesto encontrado:");
                        System.out.printf("  SKU: %d%n", r.getSku());
                        System.out.printf("  Nombre: %s%n", r.getNombre());
                        System.out.printf("  Cantidad: %d%n", r.getCantidad());
                        System.out.printf("  Precio: %d%n", r.getPrecio());
                        System.out.printf("  Disponible: %s%n", r.isDisponible() ? "si" : "no");
                    }
                    break;

                case 3:
                    System.out.println("Saliendo...");
                    sc.close();
                    System.exit(0);

                default:
                    System.out.println("¡Opción inválida, intente de nuevo!");
            }
        }
    }
}


database.java:
package com.empresa.inventario;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class Database {
    private static final String URL = "jdbc:mysql://localhost:3306/bd_lyl?serverTimezone=UTC";
    private static final String USER = "root";
    private static final String PASS = "axeler8";
    static { try { Class.forName("com.mysql.cj.jdbc.Driver"); } catch(Exception e){ throw new RuntimeException(e);} }

    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL,USER,PASS);
    }

    public static List<Repuesto> obtenerTodosRepuestos() {
        String sql="SELECT sku,nombre,cantidad,precio,disponible FROM repuestos";
        List<Repuesto> list=new ArrayList<>();
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql);ResultSet rs=ps.executeQuery()){
            while(rs.next()){
                boolean disp="si".equalsIgnoreCase(rs.getString("disponible"));
                list.add(new Repuesto(rs.getInt("sku"),rs.getString("nombre"),rs.getInt("cantidad"),rs.getInt("precio"),disp));
            }
        }catch(SQLException e){e.printStackTrace();}
        return list;
    }

    public static Repuesto obtenerRepuestoPorSku(int sku){
        String sql="SELECT sku,nombre,cantidad,precio,disponible FROM repuestos WHERE sku=?";
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql)){
            ps.setInt(1,sku);
            try(ResultSet rs=ps.executeQuery()){ if(rs.next()){ boolean disp="si".equalsIgnoreCase(rs.getString("disponible")); return new Repuesto(rs.getInt("sku"),rs.getString("nombre"),rs.getInt("cantidad"),rs.getInt("precio"),disp);} }
        }catch(SQLException e){e.printStackTrace();}
        return null;
    }

    public static void insertarRepuesto(int idUbicacion,int sku,int cantidad,int precio,boolean disponible,String nombre){
        String sql="INSERT INTO repuestos(idUbicacion,sku,cantidad,precio,disponible,nombre) VALUES(?,?,?,?,?,?)";
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql)){
            ps.setInt(1,idUbicacion);ps.setInt(2,sku);ps.setInt(3,cantidad);ps.setInt(4,precio);ps.setString(5,disponible?"si":"no");ps.setString(6,nombre);ps.executeUpdate();
        }catch(SQLException e){e.printStackTrace();}
    }

    public static void actualizarStock(int idUbicacion,int sku,int delta){
        String sql="UPDATE repuestos SET cantidad=cantidad+? WHERE idUbicacion=? AND sku=?";
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql)){
            ps.setInt(1,delta);ps.setInt(2,idUbicacion);ps.setInt(3,sku);ps.executeUpdate();
        }catch(SQLException e){e.printStackTrace();}
    }

    public static List<Reserva> obtenerTodasReservas(){
        String sql="SELECT idReserva,idVehiculo,sku,cantidad FROM reservas";
        List<Reserva> list=new ArrayList<>();
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql);ResultSet rs=ps.executeQuery()){
            while(rs.next()){list.add(new Reserva(rs.getInt("idReserva"),rs.getInt("idVehiculo"),rs.getInt("sku"),rs.getInt("cantidad")));}
        }catch(SQLException e){e.printStackTrace();}
        return list;
    }

    public static Reserva obtenerReservaPorId(int idReserva){
        String sql="SELECT idReserva,idVehiculo,sku,cantidad FROM reservas WHERE idReserva=?";
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql)){
            ps.setInt(1,idReserva);
            try(ResultSet rs=ps.executeQuery()){if(rs.next()){return new Reserva(rs.getInt("idReserva"),rs.getInt("idVehiculo"),rs.getInt("sku"),rs.getInt("cantidad"));}}
        }catch(SQLException e){e.printStackTrace();}
        return null;
    }

    public static void insertarReserva(int idVehiculo,int sku,int cantidad){
        String sql="INSERT INTO reservas(idVehiculo,sku,cantidad) VALUES(?,?,?)";
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql)){
            ps.setInt(1,idVehiculo);ps.setInt(2,sku);ps.setInt(3,cantidad);ps.executeUpdate();
        }catch(SQLException e){e.printStackTrace();}
    }

    public static void eliminarReserva(int idReserva){
        String sql="DELETE FROM reservas WHERE idReserva=?";
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql)){
            ps.setInt(1,idReserva);ps.executeUpdate();
        }catch(SQLException e){e.printStackTrace();}
    }
}

inventarioservice.java:
package com.empresa.inventario;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;

public interface InventarioService extends Remote {
    List<Repuesto> verRepuestos() throws RemoteException;
    Repuesto consultarRepuesto(int sku) throws RemoteException;
    void agregarRepuesto(int idUbicacion, int sku, int cantidad, int precio, boolean disponible, String nombre) throws RemoteException;
    void liberarRepuesto(int idUbicacion, int sku, int cantidad) throws RemoteException;

    List<Reserva> verReservas() throws RemoteException;
    Reserva consultarReserva(int idReserva) throws RemoteException;
    void agregarReserva(int idVehiculo, int sku, int cantidad) throws RemoteException;
    void liberarReserva(int idReserva) throws RemoteException;
}

inventarioserviceimpl.java:

package com.empresa.inventario;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;

public class InventarioServiceImpl extends UnicastRemoteObject implements InventarioService {
    public InventarioServiceImpl() throws RemoteException { super(); }

    @Override public List<Repuesto> verRepuestos() throws RemoteException {
        return Database.obtenerTodosRepuestos();
    }
    @Override public Repuesto consultarRepuesto(int sku) throws RemoteException {
        return Database.obtenerRepuestoPorSku(sku);
    }
    @Override public void agregarRepuesto(int idUbicacion,int sku,int cantidad,int precio,boolean disponible,String nombre) throws RemoteException {
        Database.insertarRepuesto(idUbicacion,sku,cantidad,precio,disponible,nombre);
    }
    @Override public void liberarRepuesto(int idUbicacion,int sku,int cantidad) throws RemoteException {
        Database.actualizarStock(idUbicacion,sku,-cantidad);
    }
    @Override public List<Reserva> verReservas() throws RemoteException {
        return Database.obtenerTodasReservas();
    }
    @Override public Reserva consultarReserva(int idReserva) throws RemoteException {
        return Database.obtenerReservaPorId(idReserva);
    }
    @Override public void agregarReserva(int idVehiculo,int sku,int cantidad) throws RemoteException {
        Database.insertarReserva(idVehiculo,sku,cantidad);
    }
    @Override public void liberarReserva(int idReserva) throws RemoteException {
        Database.eliminarReserva(idReserva);
    }
}

repuesto.java:
package com.empresa.inventario;

import java.io.Serializable;

public class Repuesto implements Serializable {
    private int sku;
    private String nombre;
    private int cantidad;
    private int precio;
    private boolean disponible;

    public Repuesto(int sku, String nombre, int cantidad, int precio, boolean disponible) {
        this.sku = sku;
        this.nombre = nombre;
        this.cantidad = cantidad;
        this.precio = precio;
        this.disponible = disponible;
    }
    public int getSku() { return sku; }
    public String getNombre() { return nombre; }
    public int getCantidad() { return cantidad; }
    public int getPrecio() { return precio; }
    public boolean isDisponible() { return disponible; }
}

reserva.java:
package com.empresa.inventario;

import java.io.Serializable;

public class Reserva implements Serializable {
    private int idReserva;
    private int idVehiculo;
    private int sku;
    private int cantidad;

    public Reserva(int idReserva, int idVehiculo, int sku, int cantidad) {
        this.idReserva = idReserva;
        this.idVehiculo = idVehiculo;
        this.sku = sku;
        this.cantidad = cantidad;
    }
    public int getIdReserva() { return idReserva; }
    public int getIdVehiculo() { return idVehiculo; }
    public int getSku() { return sku; }
    public int getCantidad() { return cantidad; }
}

operarioconsole.java:
package com.empresa.operario;

import com.empresa.inventario.InventarioService;
import java.rmi.Naming;
import java.util.Scanner;

public class OperarioConsole {
    public static void main(String[] args) throws Exception {
        // Conexión RMI
        InventarioService svc = (InventarioService) Naming.lookup("rmi://localhost:1099/InventarioService");
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- Consola Operario ---");
            System.out.println("1) Agregar repuesto");
            System.out.println("2) Liberar repuesto");
            System.out.println("3) Agregar reserva");
            System.out.println("4) Liberar reserva");
            System.out.println("5) Salir");
            System.out.print("Seleccione una opción: ");
            int op = sc.nextInt();
            sc.nextLine(); // limpia el buffer

            switch (op) {
                case 1:
                    System.out.println("\n-- Agregar Repuesto --");
                    System.out.print("Ingrese ID de Ubicación: ");
                    int idUb = sc.nextInt();
                    System.out.print("Ingrese SKU: ");
                    int skuAdd = sc.nextInt();
                    System.out.print("Ingrese Cantidad: ");
                    int cantAdd = sc.nextInt();
                    System.out.print("Ingrese Precio: ");
                    int precio = sc.nextInt();
                    sc.nextLine();
                    System.out.print("¿Disponible? (si/no): ");
                    boolean disponible = "si".equalsIgnoreCase(sc.nextLine().trim());
                    System.out.print("Ingrese Nombre del Repuesto: ");
                    String nombre = sc.nextLine();

                    svc.agregarRepuesto(idUb, skuAdd, cantAdd, precio, disponible, nombre);
                    System.out.println("✔ Repuesto agregado correctamente.");
                    break;

                case 2:
                    System.out.println("\n-- Liberar Repuesto --");
                    System.out.print("Ingrese ID de Ubicación: ");
                    int idUbLib = sc.nextInt();
                    System.out.print("Ingrese SKU: ");
                    int skuLib = sc.nextInt();
                    System.out.print("Ingrese Cantidad a liberar: ");
                    int cantLib = sc.nextInt();

                    svc.liberarRepuesto(idUbLib, skuLib, cantLib);
                    System.out.println("✔ Repuesto liberado correctamente.");
                    break;

                case 3:
                    System.out.println("\n-- Agregar Reserva --");
                    System.out.print("Ingrese ID de Vehículo: ");
                    int idVeh = sc.nextInt();
                    System.out.print("Ingrese SKU del Repuesto: ");
                    int skuRes = sc.nextInt();
                    System.out.print("Ingrese Cantidad a reservar: ");
                    int cantRes = sc.nextInt();

                    svc.agregarReserva(idVeh, skuRes, cantRes);
                    System.out.println("✔ Reserva agregada correctamente.");
                    break;

                case 4:
                    System.out.println("\n-- Liberar Reserva --");
                    System.out.print("Ingrese ID de Reserva: ");
                    int idRes = sc.nextInt();

                    svc.liberarReserva(idRes);
                    System.out.println("✔ Reserva liberada correctamente.");
                    break;

                case 5:
                    System.out.println("Saliendo...");
                    sc.close();
                    System.exit(0);

                default:
                    System.out.println("¡Opción inválida, intente de nuevo!");
            }
        }
    }
}

servermain.java:
package com.empresa.server;

import com.empresa.inventario.InventarioService;
import com.empresa.inventario.InventarioServiceImpl;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class ServerMain {
    public static void main(String[] args) {
        try {
            Registry registry = LocateRegistry.createRegistry(1099);
            InventarioService svc = new InventarioServiceImpl();
            registry.rebind("InventarioService", svc);
            System.out.println("Servidor RMI iniciado en puerto 1099...");
            // <— añade esto para bloquear tu main y mantener vivo el proceso:
            System.out.println("Presione ENTER para apagar el servidor");
            System.in.read();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}