db.sql:
-- -----------------------------------------------------
-- 1) Eliminar y recrear la base de datos
-- -----------------------------------------------------
DROP DATABASE IF EXISTS `bd_lyl`;
CREATE DATABASE `bd_lyl` DEFAULT CHARACTER SET utf8;
USE `bd_lyl`;

-- -----------------------------------------------------
-- 2) Ajustes temporales para crear tablas en cualquier orden
-- -----------------------------------------------------
SET @OLD_UNIQUE_CHECKS = @@UNIQUE_CHECKS, UNIQUE_CHECKS = 0;
SET @OLD_FOREIGN_KEY_CHECKS = @@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS = 0;
SET @OLD_SQL_MODE = @@SQL_MODE, 
    SQL_MODE = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- 3) Tablas
-- -----------------------------------------------------

-- Tabla: ubicaciones
CREATE TABLE `ubicaciones` (
  `idUbicacion` INT NOT NULL AUTO_INCREMENT,
  `nombre`       VARCHAR(45) NOT NULL,
  `direccion`    VARCHAR(45) NOT NULL,
  `capacidad`    INT NULL,
  PRIMARY KEY (`idUbicacion`),
  UNIQUE KEY `uq_ubicaciones_id` (`idUbicacion`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Tabla: repuestos
CREATE TABLE `repuestos` (
  `idRepuesto`   INT NOT NULL AUTO_INCREMENT,
  `idUbicacion`  INT NOT NULL,
  `sku`          INT NOT NULL,
  `cantidad`     INT NOT NULL,
  `precio`       INT NOT NULL,
  `categoria`    INT NULL,
  `disponible`   ENUM('si','no') NOT NULL,
  `nombre`       VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idRepuesto`),
  UNIQUE KEY `uq_repuestos_id` (`idRepuesto`),
  UNIQUE KEY `uq_repuestos_sku` (`sku`),
  KEY `idx_repuestos_ubicacion` (`idUbicacion`),
  CONSTRAINT `fk_repuestos_ubicaciones`
    FOREIGN KEY (`idUbicacion`)
    REFERENCES `ubicaciones` (`idUbicacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Tabla: vehiculos
CREATE TABLE `vehiculos` (
  `idVehiculo`   INT NOT NULL AUTO_INCREMENT,
  `anio`         INT NULL,
  `idUbicacion`  INT NOT NULL,
  `nombre`       VARCHAR(45) NOT NULL,
  `modelo`       VARCHAR(45) NOT NULL,
  `cilindraje`   VARCHAR(45) NULL,
  `color`        VARCHAR(45) NULL,
  PRIMARY KEY (`idVehiculo`),
  UNIQUE KEY `uq_vehiculos_id` (`idVehiculo`),
  KEY `idx_vehiculos_ubicacion` (`idUbicacion`),
  CONSTRAINT `fk_vehiculos_ubicaciones`
    FOREIGN KEY (`idUbicacion`)
    REFERENCES `ubicaciones` (`idUbicacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Tabla: reservas
CREATE TABLE `reservas` (
  `idReserva`    INT NOT NULL AUTO_INCREMENT,
  `idVehiculo`   INT NOT NULL,
  `sku`          INT NOT NULL,
  `cantidad`     INT NOT NULL,
  `fecha`        DATETIME NULL,
  PRIMARY KEY (`idReserva`),
  UNIQUE KEY `uq_reservas_id` (`idReserva`),
  KEY `idx_reservas_vehiculo` (`idVehiculo`),
  KEY `idx_reservas_sku` (`sku`),
  CONSTRAINT `fk_reservas_vehiculos`
    FOREIGN KEY (`idVehiculo`)
    REFERENCES `vehiculos` (`idVehiculo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reservas_repuestos`
    FOREIGN KEY (`sku`)
    REFERENCES `repuestos` (`sku`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- -----------------------------------------------------
-- 4) Restaurar modos y checks originales
-- -----------------------------------------------------
SET SQL_MODE            = @OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS  = @OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS       = @OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- 5) Insertar datos de ejemplo
-- -----------------------------------------------------
USE `bd_lyl`;

-- 5.1 Insertar ubicaciones
INSERT INTO ubicaciones (nombre, direccion, capacidad) VALUES
  ('Taller Central', 'Calle Motor 123', 500),
  ('Bodega Norte',   'Avenida Partes 456', 2000),
  ('Sucursal Sur',   'Bulevar Repuestos 789', 1500);

-- 5.2 Insertar repuestos
INSERT INTO repuestos (idUbicacion, sku, cantidad, precio, categoria, disponible, nombre) VALUES
  (1, 1001, 50,  15, 1, 'si', 'Filtro de aire'),
  (1, 1002, 30,   8, 1, 'si', 'Bujías'),
  (2, 1003, 20,  45, 2, 'no', 'Pastillas de freno'),
  (3, 1004, 10, 120, 3, 'si', 'Amortiguador');

-- 5.3 Insertar vehículos
INSERT INTO vehiculos (anio, idUbicacion, nombre, modelo, cilindraje, color) VALUES
  (2020, 1, 'Toyota Corolla', 'LE', '1.8L', 'Blanco'),
  (2019, 2, 'Honda Civic',    'EX', '2.0L', 'Rojo');

-- 5.4 Insertar reservas
INSERT INTO reservas (idVehiculo, sku, cantidad, fecha) VALUES
  (1, 1001, 2, NOW()),
  (2, 1003, 1, NOW());

clienteconsole.java:
// ClienteConsole.java
package com.empresa.cliente;

import com.empresa.inventario.InventarioService;
import com.empresa.inventario.Repuesto;

import java.rmi.Naming;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

public class ClienteConsole {
    public static void main(String[] args) throws Exception {
        InventarioService svc = (InventarioService) Naming.lookup("rmi://localhost:1099/InventarioService");
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- Consola Cliente ---");
            System.out.println("1) Ver repuestos");
            System.out.println("2) Consultar repuesto por SKU");
            System.out.println("3) Salir");

            int op = readInt(sc, "Seleccione una opción: ", 1, 3);

            switch (op) {
                case 1:
                    mostrarRepuestos(svc);
                    break;
                case 2:
                    buscarRepuesto(svc, sc);
                    break;
                case 3:
                    System.out.println("Saliendo...");
                    sc.close();
                    System.exit(0);
            }
        }
    }

    private static void mostrarRepuestos(InventarioService svc) throws Exception {
        System.out.println("\n-- Lista de Repuestos --");
        List<Repuesto> todos = svc.verRepuestos();
        if (todos.isEmpty()) {
            System.out.println("No hay repuestos registrados.");
        } else {
            todos.forEach(r -> System.out.printf("SKU: %d | Nombre: %s | Cantidad: %d | Precio: %d | Disponible: %s%n",
                r.getSku(), r.getNombre(), r.getCantidad(), r.getPrecio(), r.isDisponible() ? "si" : "no"));
        }
    }

    private static void buscarRepuesto(InventarioService svc, Scanner sc) throws Exception {
        System.out.println("\n-- Buscar Repuesto --");
        int sku = readInt(sc, "Ingrese SKU: ", 1, Integer.MAX_VALUE);
        Repuesto r = svc.consultarRepuesto(sku);
        if (r == null) {
            System.out.printf("⚠ No existe ningún repuesto con SKU %d.%n", sku);
        } else {
            System.out.println("Repuesto encontrado:");
            System.out.printf("  SKU: %d%n", r.getSku());
            System.out.printf("  Nombre: %s%n", r.getNombre());
            System.out.printf("  Cantidad: %d%n", r.getCantidad());
            System.out.printf("  Precio: %d%n", r.getPrecio());
            System.out.printf("  Disponible: %s%n", r.isDisponible() ? "si" : "no");
        }
    }

    private static int readInt(Scanner sc, String prompt, int min, int max) {
        while (true) {
            System.out.print(prompt);
            try {
                int val = sc.nextInt(); sc.nextLine();
                if (val < min || val > max) {
                    System.out.printf("Valor inválido: debe estar entre %d y %d.%n", min, max);
                } else {
                    return val;
                }
            } catch (InputMismatchException e) {
                System.out.println("Entrada no válida: ingrese un número entero.");
                sc.nextLine();
            }
        }
    }
}
database.java:
package com.empresa.inventario;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class Database {
    private static final String URL = "jdbc:mysql://localhost:3306/bd_lyl?serverTimezone=UTC";
    private static final String USER = "root";
    private static final String PASS = "axeler8";
    static { try { Class.forName("com.mysql.cj.jdbc.Driver"); } catch(Exception e){ throw new RuntimeException(e);} }

    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL,USER,PASS);
    }

    public static List<Repuesto> obtenerTodosRepuestos() {
        String sql="SELECT sku,nombre,cantidad,precio,disponible FROM repuestos";
        List<Repuesto> list=new ArrayList<>();
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql);ResultSet rs=ps.executeQuery()){
            while(rs.next()){
                boolean disp="si".equalsIgnoreCase(rs.getString("disponible"));
                list.add(new Repuesto(rs.getInt("sku"),rs.getString("nombre"),rs.getInt("cantidad"),rs.getInt("precio"),disp));
            }
        }catch(SQLException e){e.printStackTrace();}
        return list;
    }

    public static Repuesto obtenerRepuestoPorSku(int sku){
        String sql="SELECT sku,nombre,cantidad,precio,disponible FROM repuestos WHERE sku=?";
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql)){
            ps.setInt(1,sku);
            try(ResultSet rs=ps.executeQuery()){ if(rs.next()){ boolean disp="si".equalsIgnoreCase(rs.getString("disponible")); return new Repuesto(rs.getInt("sku"),rs.getString("nombre"),rs.getInt("cantidad"),rs.getInt("precio"),disp);} }
        }catch(SQLException e){e.printStackTrace();}
        return null;
    }

    public static void insertarRepuesto(int idUbicacion,int sku,int cantidad,int precio,boolean disponible,String nombre){
        String sql="INSERT INTO repuestos(idUbicacion,sku,cantidad,precio,disponible,nombre) VALUES(?,?,?,?,?,?)";
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql)){
            ps.setInt(1,idUbicacion);ps.setInt(2,sku);ps.setInt(3,cantidad);ps.setInt(4,precio);ps.setString(5,disponible?"si":"no");ps.setString(6,nombre);ps.executeUpdate();
        }catch(SQLException e){e.printStackTrace();}
    }

    public static void actualizarStock(int idUbicacion,int sku,int delta){
        String sql="UPDATE repuestos SET cantidad=cantidad+? WHERE idUbicacion=? AND sku=?";
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql)){
            ps.setInt(1,delta);ps.setInt(2,idUbicacion);ps.setInt(3,sku);ps.executeUpdate();
        }catch(SQLException e){e.printStackTrace();}
    }

    public static List<Reserva> obtenerTodasReservas(){
        String sql="SELECT idReserva,idVehiculo,sku,cantidad FROM reservas";
        List<Reserva> list=new ArrayList<>();
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql);ResultSet rs=ps.executeQuery()){
            while(rs.next()){list.add(new Reserva(rs.getInt("idReserva"),rs.getInt("idVehiculo"),rs.getInt("sku"),rs.getInt("cantidad")));}
        }catch(SQLException e){e.printStackTrace();}
        return list;
    }

    public static Reserva obtenerReservaPorId(int idReserva){
        String sql="SELECT idReserva,idVehiculo,sku,cantidad FROM reservas WHERE idReserva=?";
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql)){
            ps.setInt(1,idReserva);
            try(ResultSet rs=ps.executeQuery()){if(rs.next()){return new Reserva(rs.getInt("idReserva"),rs.getInt("idVehiculo"),rs.getInt("sku"),rs.getInt("cantidad"));}}
        }catch(SQLException e){e.printStackTrace();}
        return null;
    }

    public static void insertarReserva(int idVehiculo, int sku, int cantidad) {
        String sql = "INSERT INTO reservas(idVehiculo,sku,cantidad,fecha) VALUES(?,?,?,NOW())";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, idVehiculo);
            ps.setInt(2, sku);
            ps.setInt(3, cantidad);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void eliminarReserva(int idReserva){
        String sql="DELETE FROM reservas WHERE idReserva=?";
        try(Connection c=getConnection();PreparedStatement ps=c.prepareStatement(sql)){
            ps.setInt(1,idReserva);ps.executeUpdate();
        }catch(SQLException e){e.printStackTrace();}
    }
    public static Ubicacion obtenerUbicacionPorId(int id) {
        String sql = "SELECT idUbicacion,nombre,direccion,capacidad FROM ubicaciones WHERE idUbicacion=?";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new Ubicacion(rs.getInt("idUbicacion"), rs.getString("nombre"), rs.getString("direccion"), rs.getInt("capacidad"));
                }
            }
        } catch (SQLException e) { e.printStackTrace(); }
        return null;
    }

    public static Vehiculo obtenerVehiculoPorId(int id) {
        String sql = "SELECT idVehiculo,anio,idUbicacion,nombre,modelo,cilindraje,color FROM vehiculos WHERE idVehiculo=?";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new Vehiculo(rs.getInt("idVehiculo"), rs.getInt("anio"), rs.getInt("idUbicacion"), rs.getString("nombre"), rs.getString("modelo"), rs.getString("cilindraje"), rs.getString("color"));
                }
            }
        } catch (SQLException e) { e.printStackTrace(); }
        return null;
    }

    public static int obtenerStockTotalPorUbicacion(int idUbicacion) {
        String sql = "SELECT COALESCE(SUM(cantidad),0) AS total FROM repuestos WHERE idUbicacion=?";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, idUbicacion);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) return rs.getInt("total");
            }
        } catch (SQLException e) { e.printStackTrace(); }
        return 0;
    }
    
    public static Repuesto obtenerRepuestoPorUbicacion(int idUbicacion, int sku) {
        String sql = "SELECT sku,nombre,cantidad,precio,disponible FROM repuestos WHERE idUbicacion=? AND sku=?";
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, idUbicacion);
            ps.setInt(2, sku);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    boolean disp = "si".equalsIgnoreCase(rs.getString("disponible"));
                    return new Repuesto(rs.getInt("sku"), rs.getString("nombre"), rs.getInt("cantidad"), rs.getInt("precio"), disp);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
}

inventarioservice.java:
package com.empresa.inventario;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;

public interface InventarioService extends Remote {
    List<Repuesto> verRepuestos() throws RemoteException;
    Repuesto consultarRepuesto(int sku) throws RemoteException;
    void agregarRepuesto(int idUbicacion, int sku, int cantidad, int precio, boolean disponible, String nombre) throws RemoteException;
    void liberarRepuesto(int idUbicacion, int sku, int cantidad) throws RemoteException;

    List<Reserva> verReservas() throws RemoteException;
    Reserva consultarReserva(int idReserva) throws RemoteException;
    void agregarReserva(int idVehiculo, int sku, int cantidad) throws RemoteException;
    void liberarReserva(int idReserva) throws RemoteException;

    Ubicacion consultarUbicacion(int idUbicacion) throws RemoteException;
    int consultarStockUbicacion(int idUbicacion) throws RemoteException;
    Vehiculo consultarVehiculo(int idVehiculo) throws RemoteException;
    Repuesto consultarRepuestoEnUbicacion(int idUbicacion, int sku) throws java.rmi.RemoteException;

}

inventarioserviceimpl.java:

package com.empresa.inventario;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;

public class InventarioServiceImpl extends UnicastRemoteObject implements InventarioService {
    public InventarioServiceImpl() throws RemoteException { super(); }
    
    @Override public List<Repuesto> verRepuestos() throws RemoteException {
        return Database.obtenerTodosRepuestos();
    }
    @Override public Repuesto consultarRepuesto(int sku) throws RemoteException {
        return Database.obtenerRepuestoPorSku(sku);
    }
    @Override public void agregarRepuesto(int idUbicacion,int sku,int cantidad,int precio,boolean disponible,String nombre) throws RemoteException {
        Database.insertarRepuesto(idUbicacion,sku,cantidad,precio,disponible,nombre);
    }
    @Override public void liberarRepuesto(int idUbicacion,int sku,int cantidad) throws RemoteException {
        Database.actualizarStock(idUbicacion,sku,-cantidad);
    }
    @Override public List<Reserva> verReservas() throws RemoteException {
        return Database.obtenerTodasReservas();
    }
    @Override public Reserva consultarReserva(int idReserva) throws RemoteException {
        return Database.obtenerReservaPorId(idReserva);
    }
    @Override public void agregarReserva(int idVehiculo,int sku,int cantidad) throws RemoteException {
        Database.insertarReserva(idVehiculo,sku,cantidad);
    }
    @Override public void liberarReserva(int idReserva) throws RemoteException {
        Database.eliminarReserva(idReserva);
    }
    @Override
    public Ubicacion consultarUbicacion(int idUbicacion) throws java.rmi.RemoteException {
        return Database.obtenerUbicacionPorId(idUbicacion);
    }

    @Override
    public int consultarStockUbicacion(int idUbicacion) throws java.rmi.RemoteException {
        return Database.obtenerStockTotalPorUbicacion(idUbicacion);
    }

    @Override
    public Vehiculo consultarVehiculo(int idVehiculo) throws java.rmi.RemoteException {
        return Database.obtenerVehiculoPorId(idVehiculo);
    }

    @Override
    public Repuesto consultarRepuestoEnUbicacion(int idUbicacion, int sku) throws java.rmi.RemoteException {
        return Database.obtenerRepuestoPorUbicacion(idUbicacion, sku);
    }
}

repuesto.java:
package com.empresa.inventario;

import java.io.Serializable;

public class Repuesto implements Serializable {
    private int sku;
    private String nombre;
    private int cantidad;
    private int precio;
    private boolean disponible;

    public Repuesto(int sku, String nombre, int cantidad, int precio, boolean disponible) {
        this.sku = sku;
        this.nombre = nombre;
        this.cantidad = cantidad;
        this.precio = precio;
        this.disponible = disponible;
    }
    public int getSku() { return sku; }
    public String getNombre() { return nombre; }
    public int getCantidad() { return cantidad; }
    public int getPrecio() { return precio; }
    public boolean isDisponible() { return disponible; }
}

reserva.java:
package com.empresa.inventario;

import java.io.Serializable;

public class Reserva implements Serializable {
    private int idReserva;
    private int idVehiculo;
    private int sku;
    private int cantidad;

    public Reserva(int idReserva, int idVehiculo, int sku, int cantidad) {
        this.idReserva = idReserva;
        this.idVehiculo = idVehiculo;
        this.sku = sku;
        this.cantidad = cantidad;
    }
    public int getIdReserva() { return idReserva; }
    public int getIdVehiculo() { return idVehiculo; }
    public int getSku() { return sku; }
    public int getCantidad() { return cantidad; }
}

ubicacion.java:
package com.empresa.inventario;

import java.io.Serializable;

public class Ubicacion implements Serializable {
    private int idUbicacion;
    private String nombre;
    private String direccion;
    private int capacidad;

    public Ubicacion(int idUbicacion, String nombre, String direccion, int capacidad) {
        this.idUbicacion = idUbicacion;
        this.nombre      = nombre;
        this.direccion   = direccion;
        this.capacidad   = capacidad;
    }

    public int getIdUbicacion() { return idUbicacion; }
    public String getNombre()       { return nombre;      }
    public String getDireccion()    { return direccion;   }
    public int getCapacidad()       { return capacidad;   }
}

vehiculo.java:
package com.empresa.inventario;

import java.io.Serializable;

public class Vehiculo implements Serializable {
    private int idVehiculo;
    private int anio;
    private int idUbicacion;
    private String nombre;
    private String modelo;
    private String cilindraje;
    private String color;

    public Vehiculo(int idVehiculo, int anio, int idUbicacion, String nombre, String modelo, String cilindraje, String color) {
        this.idVehiculo  = idVehiculo;
        this.anio        = anio;
        this.idUbicacion = idUbicacion;
        this.nombre      = nombre;
        this.modelo      = modelo;
        this.cilindraje  = cilindraje;
        this.color       = color;
    }

    public int getIdVehiculo()    { return idVehiculo; }
    public int getAnio()          { return anio;       }
    public int getIdUbicacion()   { return idUbicacion;}
    public String getNombre()     { return nombre;    }
    public String getModelo()     { return modelo;    }
    public String getCilindraje() { return cilindraje;}
    public String getColor()      { return color;     }
}

operarioconsole.java:
// **OperarioConsole.java**
package com.empresa.operario;

import com.empresa.inventario.InventarioService;
import com.empresa.inventario.Ubicacion;
import com.empresa.inventario.Repuesto;

import java.rmi.Naming;
import java.util.InputMismatchException;
import java.util.Scanner;

public class OperarioConsole {
    public static void main(String[] args) throws Exception {
        InventarioService svc = (InventarioService) Naming.lookup("rmi://localhost:1099/InventarioService");
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- Consola Operario ---");
            System.out.println("1) Agregar repuesto");
            System.out.println("2) Liberar repuesto");
            System.out.println("3) Agregar reserva");
            System.out.println("4) Liberar reserva");
            System.out.println("5) Salir");

            int op = readInt(sc, "Seleccione una opción: ", 1, 5);
            switch (op) {
                case 1: agregarRepuesto(svc, sc); break;
                case 2: liberarRepuesto(svc, sc); break;
                case 3: agregarReserva(svc, sc); break;
                case 4: liberarReserva(svc, sc); break;
                case 5:
                    System.out.println("Saliendo...");
                    sc.close();
                    System.exit(0);
            }
        }
    }

    private static void agregarRepuesto(InventarioService svc, Scanner sc) throws Exception {
        System.out.println("\n-- Agregar Repuesto --");
        int idUb;
        // Validar ID de ubicación
        while (true) {
            idUb = readInt(sc, "Ingrese ID de Ubicación: ", 1, Integer.MAX_VALUE);
            if (svc.consultarUbicacion(idUb) == null) {
                System.out.println("⚠ Ubicación inexistente.");
            } else break;
        }
        Ubicacion ub = svc.consultarUbicacion(idUb);

        int sku;
        // Validar SKU existente
        while (true) {
            sku = readInt(sc, "Ingrese SKU: ", 1, Integer.MAX_VALUE);
            if (svc.consultarRepuesto(sku) != null) {
                System.out.println("⚠ SKU ya existe.");
            } else break;
        }

        int cantidad;
        // Validar cantidad y capacidad
        while (true) {
            cantidad = readInt(sc, "Ingrese Cantidad: ", 1, Integer.MAX_VALUE);
            int stockActual = svc.consultarStockUbicacion(idUb);
            if (stockActual + cantidad > ub.getCapacidad()) {
                System.out.printf("⚠ Excede capacidad. Actual: %d, Máxima: %d.%n", stockActual, ub.getCapacidad());
            } else break;
        }

        int precio = readInt(sc, "Ingrese Precio: ", 0, Integer.MAX_VALUE);

        boolean disponible;
        // Validar boolean
        while (true) {
            String input;
            System.out.print("¿Disponible? (si/no): ");
            input = sc.nextLine().trim().toLowerCase();
            if ("si".equals(input)) { disponible = true; break; }
            if ("no".equals(input)) { disponible = false; break; }
            System.out.println("Entrada no válida: responda 'si' o 'no'.");
        }

        String nombre;
        // Validar nombre no vacío
        while (true) {
            System.out.print("Ingrese Nombre del Repuesto: ");
            nombre = sc.nextLine().trim();
            if (nombre.isEmpty()) {
                System.out.println("⚠ Nombre vacío.");
            } else break;
        }

        svc.agregarRepuesto(idUb, sku, cantidad, precio, disponible, nombre);
        System.out.println("✔ Repuesto agregado correctamente.");
    }

    private static void liberarRepuesto(InventarioService svc, Scanner sc) throws Exception {
        System.out.println("\n-- Liberar Repuesto --");
        int idUb;
        while (true) {
            idUb = readInt(sc, "Ingrese ID de Ubicación: ", 1, Integer.MAX_VALUE);
            if (svc.consultarUbicacion(idUb) == null) {
                System.out.println("⚠ Ubicación inexistente.");
            } else break;
        }

        int sku;
        Repuesto r;
        while (true) {
            sku = readInt(sc, "Ingrese SKU: ", 1, Integer.MAX_VALUE);
            r = svc.consultarRepuestoEnUbicacion(idUb, sku);
            if (r == null) {
                System.out.println("⚠ No existe repuesto con SKU " + sku + " en la ubicación " + idUb + ".");
            } else break;
        }

        int cant;
        while (true) {
            cant = readInt(sc, String.format("Ingrese Cantidad a liberar (hasta %d): ", r.getCantidad()), 1, r.getCantidad());
            break;
        }

        svc.liberarRepuesto(idUb, sku, cant);
        System.out.println("✔ Repuesto liberado correctamente.");
    }

    private static void agregarReserva(InventarioService svc, Scanner sc) throws Exception {
        System.out.println("\n-- Agregar Reserva --");
        int idVeh;
        while (true) {
            idVeh = readInt(sc, "Ingrese ID de Vehículo: ", 1, Integer.MAX_VALUE);
            if (svc.consultarVehiculo(idVeh) == null) System.out.println("⚠ Vehículo inexistente.");
            else break;
        }

        int sku;
        while (true) {
            sku = readInt(sc, "Ingrese SKU del Repuesto: ", 1, Integer.MAX_VALUE);
            if (svc.consultarRepuestoEnUbicacion(idVeh /* corregir: debería ser idUbicacion? para reserva global permite SKU global */, sku) == null)
                System.out.println("⚠ SKU inexistente para ese vehículo.");
            else break;
        }
        Repuesto r = svc.consultarRepuesto(sku);

        int cant;
        while (true) {
            cant = readInt(sc, String.format("Ingrese Cantidad a reservar (hasta %d): ", r.getCantidad()), 1, r.getCantidad());
            break;
        }

        svc.agregarReserva(idVeh, sku, cant);
        System.out.println("✔ Reserva agregada correctamente.");
    }

    private static void liberarReserva(InventarioService svc, Scanner sc) throws Exception {
        System.out.println("\n-- Liberar Reserva --");
        int idRes;
        while (true) {
            idRes = readInt(sc, "Ingrese ID de Reserva: ", 1, Integer.MAX_VALUE);
            if (svc.consultarReserva(idRes) == null) {
                System.out.println("⚠ Reserva inexistente.");
            } else break;
        }

        svc.liberarReserva(idRes);
        System.out.println("✔ Reserva liberada correctamente.");
    }

    private static int readInt(Scanner sc, String prompt, int min, int max) {
        while (true) {
            System.out.print(prompt);
            try {
                int val = sc.nextInt(); sc.nextLine();
                if (val < min || val > max) System.out.printf("Valor inválido: debe estar entre %d y %d.%n", min, max);
                else return val;
            } catch (InputMismatchException e) {
                System.out.println("Entrada no válida: ingrese un número entero.");
                sc.nextLine();
            }
        }
    }
}

servermain.java:
package com.empresa.server;

import com.empresa.inventario.InventarioService;
import com.empresa.inventario.InventarioServiceImpl;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class ServerMain {
    public static void main(String[] args) {
        try {
            Registry registry = LocateRegistry.createRegistry(1099);
            InventarioService svc = new InventarioServiceImpl();
            registry.rebind("InventarioService", svc);
            System.out.println("Servidor RMI iniciado en puerto 1099...");
            // <— añade esto para bloquear tu main y mantener vivo el proceso:
            System.out.println("Presione ENTER para apagar el servidor");
            System.in.read();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}